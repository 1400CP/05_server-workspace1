/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.99
 * Generated at: 2025-02-14 06:11:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class responsePage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write("    h2{\r\n");
      out.write("        color: red;\r\n");
      out.write("    }\r\n");
      out.write("    #name{\r\n");
      out.write("        color: orange\r\n");
      out.write("    }\r\n");
      out.write("    #age{\r\n");
      out.write("        color: blue;\r\n");
      out.write("    }\r\n");
      out.write("    #city{\r\n");
      out.write("        color: yellowgreen;\r\n");
      out.write("    }\r\n");
      out.write("    #height{\r\n");
      out.write("        color: purple\r\n");
      out.write("    }\r\n");
      out.write("    #gender{\r\n");
      out.write("        color: green;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	");

		// 스크립틀릿 == html 문서 내에 자바코드를 쓸 수 있는 영역
		// int a = 10;
	
		// request 영역 안에 attribute 공간에 값을 셋팅했음.
		// set <-> get
		// request.getAttribute("키") : 밸류(Object)
		String name = (String)request.getAttribute("name"); // 강제형변환을 해야 함.
		int age = (int)request.getAttribute("age");
		String city = (String)request.getAttribute("city");
		double height = (double)request.getAttribute("height");
		String gender = (String)request.getAttribute("gender");
		String[] foods = (String[])request.getAttribute("foods");
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <h2>개인정보 응답화면 - POST</h2>\r\n");
      out.write("\r\n");
      out.write("    <span id=\"name\">");
      out.print( name );
      out.write("</span>님은\r\n");
      out.write("    <span id=\"age\">");
      out.print( age );
      out.write("</span>살이며,\r\n");
      out.write("    <span id=\"city\">");
      out.print( city );
      out.write("</span>에 사는\r\n");
      out.write("    키는<span id=\"height\">");
      out.print( height );
      out.write("</span>cm 이고\r\n");
      out.write("\r\n");
      out.write("    성별은\r\n");
      out.write("    \r\n");
      out.write("    ");
 if(gender == null){ 
      out.write("\r\n");
      out.write("    		선택하지 않았습니다. <br> <!-- case1 -->\r\n");
      out.write("    ");
 }else { 
      out.write("\r\n");
      out.write("    	");
 if(gender.equals("M")){ 
      out.write("\r\n");
      out.write("    		<span id=\"gender\">남자</span>입니다. <!-- case2_1 -->\r\n");
      out.write("    	");
 }else { 
      out.write("\r\n");
      out.write("    		<span id=\"gender\">여자</span>입니다. <!-- case2_2 -->\r\n");
      out.write("    	");
 } 
      out.write("\r\n");
      out.write("		");
 } 
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("    좋아하는 음식은 \r\n");
      out.write("    ");
 if(foods == null) { 
      out.write("\r\n");
      out.write("        없습니다. <!-- case1 -->\r\n");
      out.write("    ");
 }else {
      out.write("    \r\n");
      out.write("        <ul>\r\n");
      out.write("            ");
 for(int i=0; i<foods.length; i++){ 
      out.write("\r\n");
      out.write("        				<li>");
      out.print( foods[i] );
      out.write("</li>\r\n");
      out.write("        		");
 } 
      out.write("	\r\n");
      out.write("        </ul>\r\n");
      out.write("		");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
