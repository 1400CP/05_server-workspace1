/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.99
 * Generated at: 2025-02-17 03:02:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.pizza;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.text.SimpleDateFormat;
import java.util.Date;

public final class pizzaOrderForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<h1>피자 주문 페이지</h1>\r\n");
      out.write("	\r\n");
      out.write("	<h2>오늘의 날짜</h2>\r\n");
      out.write("	");

		Date today = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy년 MM월 dd일");
	
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	<h4>");
      out.print( sdf.format(today) );
      out.write("</h4>\r\n");
      out.write("	<br><br>\r\n");
      out.write("\r\n");
      out.write("	<form action=\"/jsp/confirmPizza.do\" method=\"get\">\r\n");
      out.write("\r\n");
      out.write("		<fieldset>\r\n");
      out.write("			<legend>주문자정보</legend>\r\n");
      out.write("			<table>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>이름</th>\r\n");
      out.write("					<td><input type=\"text\" name=\"username\" required></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>전화번호</th>\r\n");
      out.write("					<td><input type=\"text\" name=\"phone\" required></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>주소</th>\r\n");
      out.write("					<td><input type=\"text\" name=\"address\" required></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>요청사항</th>\r\n");
      out.write("					<td><textarea name=\"message\"></textarea></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</table>\r\n");
      out.write("		</fieldset>\r\n");
      out.write("		\r\n");
      out.write("\r\n");
      out.write("		<fieldset>\r\n");
      out.write("			<legend>주문정보</legend>\r\n");
      out.write("			<table>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>피자</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<!-- 피자는 목록 중 하나만 선택하니까 -->\r\n");
      out.write("						<select name=\"pizza\">\r\n");
      out.write("							<!-- 안에 있는 글자가 value가 된다. -->\r\n");
      out.write("							<option>콤비네이션</option>\r\n");
      out.write("							<option>치즈</option>\r\n");
      out.write("							<option>포테이토</option>\r\n");
      out.write("							<option>고구마</option>\r\n");
      out.write("							<option>불고기</option>\r\n");
      out.write("						</select>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>토핑</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"checkbox\" name=\"topping\" value=\"고구마무스\">고구마무스\r\n");
      out.write("						<input type=\"checkbox\" name=\"topping\" value=\"콘크림무스\">콘크림무스\r\n");
      out.write("						<input type=\"checkbox\" name=\"topping\" value=\"파인애플토핑\">파인애플토핑\r\n");
      out.write("						<br>\r\n");
      out.write("						<input type=\"checkbox\" name=\"topping\" value=\"치즈바이트\">치즈바이트\r\n");
      out.write("						<input type=\"checkbox\" name=\"topping\" value=\"치즈크러스트\">치즈크러스트\r\n");
      out.write("						<input type=\"checkbox\" name=\"topping\" value=\"치즈토핑\">치즈토핑\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>사이드</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"checkbox\" name=\"side\" value=\"콜라\">콜라\r\n");
      out.write("						<input type=\"checkbox\" name=\"side\" value=\"사이다\">사이다\r\n");
      out.write("						<input type=\"checkbox\" name=\"side\" value=\"갈릭\">갈릭소스\r\n");
      out.write("						<br>\r\n");
      out.write("						<input type=\"checkbox\" name=\"side\" value=\"핫소스\">핫소스\r\n");
      out.write("						<input type=\"checkbox\" name=\"side\" value=\"피클\">콜라\r\n");
      out.write("						<input type=\"checkbox\" name=\"side\" value=\"파마산치즈가루\">파마산치즈가루\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>결제방식</th>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type=\"radio\" name=\"payment\" value=\"card\" checked>카드결제\r\n");
      out.write("						<input type=\"radio\" name=\"payment\" value=\"cash\">현금결제\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("\r\n");
      out.write("			</table>\r\n");
      out.write("		</fieldset>\r\n");
      out.write("\r\n");
      out.write("		<br>\r\n");
      out.write("\r\n");
      out.write("		<input type=\"submit\" value=\"주문\">\r\n");
      out.write("		<input type=\"reset\">\r\n");
      out.write("	\r\n");
      out.write("	</form>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
